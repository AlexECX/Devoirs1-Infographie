{
	"version": 3,
	"file": "J:/Alexandre/\u00c9cole 2016+/Infographie/Devoirs/Devoir 1/common/__javascript__/vector.mod.js",
	"sources": [
		"J:/Alexandre/\u00c9cole 2016+/Infographie/Devoirs/Devoir 1/common/vector.py"
	],
	"sourcesContent": [
		"\n\nclass Vector:\n\n    coordinates = []\n    normalized = False\n\n    def __init__(self, *args):\n        self.coordinates = [float(i) for i in args]\n\n    def __str__(self):\n        return \"{}{}\".format(self.__class__.__name__, self.coordinates)\n\n    def __repr__(self):\n        return \"{}{}\".format(self.__class__.__name__, self.coordinates)\n\n    def __getitem__(self, item):\n        return self.coordinates[item]\n\n    def __len__(self):\n        return len(self.coordinates)\n\n    def __add__(self, vector):\n        result = [self.coordinates[i] + vector[i]\n                  for i in range(len(self.coordinates))]\n        return self.__class__(*result)\n\n    def __radd__(self, vector):\n        result = [self.coordinates[i] + vector[i]\n                  for i in range(len(self.coordinates))]\n        return self.__class__(*result)\n\n    def __iadd__(self, vector):\n        for i in range(len(self.coordinates)):\n            self.coordinates[i] += vector[i]\n        return self\n\n    def __sub__(self, vector):\n        result = [self.coordinates[i] - vector[i]\n                  for i in range(len(self.coordinates))]\n        return self.__class__(*result)\n\n    def __rsub__(self, vector):\n        result = [self.coordinates[i] - vector[i]\n                  for i in range(len(self.coordinates))]\n        return self.__class__(*result)\n\n    def __isub__(self, vector):\n        for i in range(len(self.coordinates)):\n            self.coordinates[i] -= vector[i]\n        return self\n\n    def lenght_vec(self):\n        sqrt_components = 0\n        for coord in self.coordinates:\n            sqrt_components += coord * coord\n        return sqrt_components**(.5)\n\n    def normalize(self):\n        if not self.normalized:\n            for i, coord in enumerate(self.coordinates):\n                self.coordinates[i] = coord / self.lenght_vec()\n            self.normalized = True\n        return self\n\n    @classmethod\n    def dot_product(cls, vector1, vector2):\n        dot = 0\n        vec1 = cls(*vector1)\n        vec2 = cls(*vector2)\n        vec1.normalize()\n        vec2.normalize()\n        for i in range(len(vec1)):\n            dot += vec1[i] * vec2[i]\n        return dot\n\n    def as_list(self):\n        return self.coordinates[:]\n\n\nclass Vector2D(Vector):\n\n    def __init__(self, *args):\n        super().__init__(*args)\n        while len(self.coordinates) < 2:\n            self.coordinates.append(0.0)\n        self.coordinates = self.coordinates[0:2]\n\n\nclass Vector3D(Vector):\n\n    def __init__(self, *args):\n        super().__init__(*args)\n        while len(self.coordinates) < 3:\n            self.coordinates.append(0.0)\n        self.coordinates = self.coordinates[0:3]\n\n    @classmethod\n    def cross_product(cls, vec1, vec2):\n        vector1 = cls(*vec1)\n        vector2 = cls(*vec2)\n        return cls(\n            vector1[1] * vector2[2] - vector1[2] * vector2[2],\n            vector1[2] * vector2[0] - vector1[0] * vector2[2],\n            vector1[0] * vector2[1] - vector1[1] * vector2[0],\n        )\n"
	],
	"mappings
}